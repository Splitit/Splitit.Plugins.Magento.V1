<style type="text/css">
    table.splitit td{ max-width: 120px; padding:0 8px; }
    table.splitit td input, table.splitit td select{max-width: 100%; min-width: initial;}
    #row_payment_pis_cc_addresses td.grid,
    #row_payment_pis_cc_available_installments td.value{position: relative;}
    .tiers_table_overlay,
    .tiers_table_overlay2{position: absolute; width:100%; height: 100%; top: 0; left: 0; background: rgba(255,255,255,0.8); z-index: 999; display: none;}
    #payment_pis_cc_available_installments + .tiers_table_overlay2 {display: block;}
    .lantbl.grid td, .lantbl.grid th{padding:0px!important;}
    /* for payment form */
    table.splitit_payment_form td{ max-width: 120px; padding:0 8px; }
    table.splitit_payment_form td input, table.splitit_payment_form td select{max-width: 100%; min-width: initial;}
    #row_payment_pis_paymentform_addresses td.grid,
    #row_payment_pis_paymentform_available_installments td.value{position: relative;}
</style>


<script type="text/javascript">
  var flag1 = 0;
  var flag2 = 0;
  var error;
  var baseUrl = "";
baseUrl = window.location.origin+'/';
var currenyOptions = '<?php echo $currenyOptions = $this->_getCurrencies(); ?>';
/*var currenyOptions = '<?php echo $currenyOptions = $this->_getBaseCurrency(); ?>';*/
var currencySymbolsArray = <?php echo $this->_getAvailableCurrencySymbolsArray(); ?>;

jQuery(document).ready(function(){
    if(jQuery('#payment_pis_cc-head').length > 0){
     jQuery('.save').attr('onclick','');
    }
    jQuery(".splitit").closest("td.value").addClass("grid");
    jQuery(".splitit_payment_form").closest("td.value").addClass("grid");
    //row_payment_pis_cc_depanding_on_cart_total_values
    jQuery("#row_payment_pis_cc_depanding_on_cart_total_values").find("td.scope-label").hide();

    jQuery(document).on("mousedown", ".save", function(event) {

      init().then(function () {

        if(flag1 == 0 && flag2 == 0){
          // submit save config botton
          setTimeout(function(){ 
            eval(configForm.submit());
          }, 1500);
          

        }
          
      }).catch(function(error) {
         
         alert(error);

      });

    });

    /* prod list ajax embedded*/
    var productListInterval = setInterval(function(){
  var prodList = document.getElementById('payment_pis_cc_splitit_product_skus');
  if((typeof prodList != 'undefined')&&prodList){
    clearInterval(productListInterval);
    jQuery(document).on('click','.close-btn-prod-list',function(){
        console.log('prod remove clicked');
        var inputPadding  = jQuery(prodList).css('padding-left'),
            widthLastItem = jQuery('.selected-item-conatiner .search-item-box:last-of-type').outerWidth();
        var $elemId = jQuery('#'+jQuery(prodList).attr('id')+'_prodlist');
        var prodId = jQuery(this).parent().attr('data-proid');
        var terms = split( $elemId.val() );
        terms = terms.filter(function(v){return v!==''});
        var index = terms.indexOf(prodId);
        if (index > -1) {
          terms.splice(index, 1);
        }
        $elemId.val(terms.join(","));
        jQuery(this).parent().remove();
    });
    autoPopulateProds(prodList);
    autoCompleteWizard(prodList);
  }
},2000);

function split( val ) {
      return val.split( /,\s*/ );
}
function extractLast( term ) {
  return split( term ).pop();
}

function autoPopulateProds(prodList){
  var prodIds = jQuery(prodList).val();
  jQuery.ajax({
    url: '<?php echo $this->getAjaxProdListUrl(); ?>',
    data: {isAjax: 1, prodIds: prodIds},
    type: 'GET',
    dataType: 'json',
    success: function(result){
      alert(result);
      console.log(result);
      result.forEach(function(ash){
        jQuery('<div class="search-item-box" title="'+ash.label+'" data-proid="'+ash.value+'">'
          +ash.label+'<span class="close-btn-prod-list"></span</div>')
        .appendTo('.selected-item-conatiner');
      });
    }
  });
  jQuery(prodList).val('');
}

function autoCompleteWizard(prodList){
  var gutterWidth = 8, itemPerColumn = 4;
  var $prod = jQuery(prodList);
  $prod.attr('placeholder','Product Name/SKU');
  $prod.wrapAll('<div class="ui-widget-prod-list"></div>');
  var eleHtml = $prod.parent().html();
  var textId = $prod.attr('id');
  $prod.attr('name','').parent().append('<div class="selected-item-conatiner"></div>').append(jQuery(eleHtml).attr('type','hidden').attr('id',textId+"_prodlist"));
  $prod.on( "keydown", function( event ) {
    if ( event.keyCode === jQuery.ui.keyCode.TAB &&
        jQuery( this ).autocomplete().data("uiAutocomplete").menu.active ) {
      event.preventDefault();
    }
  })
  .autocomplete({
    minLength: 3,
    source: function( request, response ) {
      jQuery.getJSON( '<?php echo $this->getAjaxProdListUrl(); ?>', {
        isAjax: 1, term: extractLast( request.term )
      }, response );
    },
    search: function() {
      // custom minLength
      var term = extractLast( this.value );
      if ( term.length < 3 ) {
        return false;
      }
    },
    focus: function() {
      // prevent value inserted on focus
      return false;
    },
    select: function( event, ui ) {
      var terms = split( jQuery('#'+textId+"_prodlist").val() );
      terms = terms.filter(function(v){return v!==''});
      // remove the current input
      // terms.pop();
      // add the selected item
      // terms.push( ui.item.value );
      if(jQuery.inArray(ui.item.value,terms)==-1){
        terms.push( ui.item.value );
        var itemBoxWidth = jQuery(this).outerWidth() / itemPerColumn;
        jQuery('<div class="search-item-box" title="'+ui.item.label+'" data-proid="'+ui.item.value+'">'+ui.item.label+'<span class="close-btn-prod-list"></span</div>')
        .appendTo('.selected-item-conatiner');
      }
        jQuery('.ui-helper-hidden-accessible').text('');
      // add placeholder to get the comma-and-space at the end
      // terms.push( "" );
      // this.value = terms.join( ", " );
      jQuery('#'+textId+"_prodlist").val(terms.join(","));
      this.value = '';      
      return false;
    }
  });
}
    /* END prod list ajax embedded */

    /* prod list ajax paymentform */
    var productListInterval1 = setInterval(function(){
  var prodList1 = document.getElementById('payment_pis_paymentform_splitit_product_skus');
  if((typeof prodList1 != 'undefined')&&prodList1){
    clearInterval(productListInterval1);
    jQuery(document).on('click','.close-btn-prod-list1',function(){
        console.log('prod1 remove clicked');
        var $elemId1 = jQuery('#'+jQuery(prodList1).attr('id')+'_prodlist');
        var prodId1 = jQuery(this).parent().attr('data-proid');
        var terms1 = split( $elemId1.val() );
        terms1 = terms1.filter(function(v){return v!==''});
        var index1 = terms1.indexOf(prodId1);
        if (index1 > -1) {
          terms1.splice(index1, 1);
        }
        $elemId1.val(terms1.join(","));
        jQuery(this).parent().remove();
    });
    autoPopulateProds1(prodList1);
    autoCompleteWizard1(prodList1);
  }
},2000);

function autoPopulateProds1(prodList1){
  var prodIds1 = jQuery(prodList1).val();
  jQuery.ajax({
    url: '<?php echo $this->getAjaxProdListUrl(); ?>',
    data: {isAjax: 1, prodIds: prodIds1},
    type: 'GET',
    dataType: 'json',
    success: function(result1){
      console.log(result1);
      result1.forEach(function(ash1){
        jQuery('<div class="search-item-box" title="'+ash1.label+'" data-proid="'+ash1.value+'">'
          +ash1.label+'<span class="close-btn-prod-list1"></span</div>')
        .appendTo('.selected-item-conatiner1');
      });
    }
  });
  jQuery(prodList1).val('');
}

function autoCompleteWizard1(prodList1){
  var gutterWidth1 = 8, itemPerColumn1 = 4;
  var $prod1 = jQuery(prodList1);
  $prod1.attr('placeholder','Product Name/SKU');
  $prod1.wrapAll('<div class="ui-widget-prod-list1"></div>');
  var eleHtml1 = $prod1.parent().html();
  var textId1 = $prod1.attr('id');
  $prod1.attr('name','').parent().append('<div class="selected-item-conatiner1"></div>').append(jQuery(eleHtml1).attr('type','hidden').attr('id',textId1+"_prodlist"));
  $prod1.on( "keydown", function( event1 ) {
    if ( event1.keyCode === jQuery.ui.keyCode.TAB &&
        jQuery( this ).autocomplete().data("uiAutocomplete").menu.active ) {
      event1.preventDefault();
    }
  })
  .autocomplete({
    minLength: 3,
    source: function( request1, response1 ) {
      jQuery.getJSON( '<?php echo $this->getAjaxProdListUrl(); ?>', {
        isAjax: 1, term: extractLast( request1.term )
      }, response1 );
    },
    search: function() {
      // custom minLength
      var term1 = extractLast( this.value );
      if ( term1.length < 3 ) {
        return false;
      }
    },
    focus: function() {
      // prevent value inserted on focus
      return false;
    },
    select: function( event, ui ) {
      var terms1 = split( jQuery('#'+textId1+"_prodlist").val() );
      terms1 = terms1.filter(function(v){return v!==''});
      // remove the current input
      // terms.pop();
      // add the selected item
      // terms.push( ui.item.value );
      if(jQuery.inArray(ui.item.value,terms1)==-1){
        terms1.push( ui.item.value );
        var itemBoxWidth1 = jQuery(this).outerWidth() / itemPerColumn1;
        jQuery('<div class="search-item-box" title="'+ui.item.label+'" data-proid="'+ui.item.value+'">'+ui.item.label+'<span class="close-btn-prod-list1"></span</div>')
        .appendTo('.selected-item-conatiner1');
      }
        jQuery('.ui-helper-hidden-accessible').text('');
      // add placeholder to get the comma-and-space at the end
      // terms.push( "" );
      // this.value = terms.join( ", " );
      jQuery('#'+textId1+"_prodlist").val(terms1.join(","));
      this.value = '';      
      return false;
    }
  });
}
    /* END prod list ajax paymentform */

    //logic for both Splitit Embedded and Payment form in sync method.
    function init() {
        return logicForEmbeddedSetting()
            .then(logicForPaymentFormSetting);
    }

    // show overlay for depending on the cart and fixed installment for Embedded 
    jQuery("#payment_pis_cc_available_installments").closest("td").append("<div class='tiers_table_overlay2'></div>");

    var checkDefaulOption =  jQuery("#payment_pis_cc_select_installment_setup").val();
    if(checkDefaulOption == 'fixed'){         
        jQuery("#payment_pis_cc_available_installments").closest("td").find(".tiers_table_overlay2").hide();
            jQuery("#tiers_table").closest("td").find(".tiers_table_overlay").show();
        }else{ 
            jQuery("#payment_pis_cc_available_installments").closest("td").find(".tiers_table_overlay2").show();
            jQuery("#tiers_table").closest("td").find(".tiers_table_overlay").hide();
        }

    jQuery("#payment_pis_cc_select_installment_setup").on("change", function(){
        var checkOption = jQuery(this).val();
        if(checkOption == 'fixed'){
            jQuery("#payment_pis_cc_available_installments").closest("td").find(".tiers_table_overlay2").hide();
            jQuery("#tiers_table").closest("td").find(".tiers_table_overlay").show();
        }else{
            jQuery("#payment_pis_cc_available_installments").closest("td").find(".tiers_table_overlay2").show();
            jQuery("#tiers_table").closest("td").find(".tiers_table_overlay").hide();            
        }
    })

    // show overlay for depending on the cart and fixed installment for Payment form 
    jQuery("#payment_pis_paymentform_available_installments").closest("td").append("<div class='tiers_table_overlay2'></div>");

    var checkDefaulOption =  jQuery("#payment_pis_paymentform_select_installment_setup").val();
    if(checkDefaulOption == 'fixed'){         
        jQuery("#payment_pis_paymentform_available_installments").closest("td").find(".tiers_table_overlay2").hide();
            jQuery("#tiers_table_payment_form").closest("td").find(".tiers_table_overlay").show();
        }else{ 
            jQuery("#payment_pis_paymentform_available_installments").closest("td").find(".tiers_table_overlay2").show();
            jQuery("#tiers_table_payment_form").closest("td").find(".tiers_table_overlay").hide();
        }

    jQuery("#payment_pis_paymentform_select_installment_setup").on("change", function(){
        var checkOption = jQuery(this).val();
        if(checkOption == 'fixed'){
            jQuery("#payment_pis_paymentform_available_installments").closest("td").find(".tiers_table_overlay2").hide();
            jQuery("#tiers_table_payment_form").closest("td").find(".tiers_table_overlay").show();
        }else{
            jQuery("#payment_pis_paymentform_available_installments").closest("td").find(".tiers_table_overlay2").show();
            jQuery("#tiers_table_payment_form").closest("td").find(".tiers_table_overlay").hide();            
        }
    })
});

// all logic for Splitit embedded Setting for depending on cart total
function logicForEmbeddedSetting(){
  return new Promise(function (resolve, reject) {

    var percentageFlag = 0;
    var overlaps = 0;
    var fromBigger = 0;
    var hasGap = 0;
    flag1 = 0;
    // validation for depanding on cart
    // $(this).unbind('click');
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    //alert('Please fill the required fields in Splitit section "Depending on cart total"');
    

    jQuery("#payment_pis_cc_percentage_of_order").css("border","1px solid #ccc");
    if(jQuery('#payment_pis_cc_select_installment_setup').val() == 'depending_on_cart_total'){
      var fromToArr = {};
      var i=0;
      jQuery("#tier_price_container tr").each(function(){
      
      
      var doctv_from = parseFloat(jQuery(this).find(".doctv_from").val());
      var doctv_to = parseFloat(jQuery(this).find(".doctv_to").val());
      var doctv_currency = jQuery(this).find(".doctv_currency").val();

      jQuery(this).find(".doctv_from").css("border","1px solid #ccc");
      jQuery(this).find(".doctv_to").css("border","1px solid #ccc");
      jQuery(this).find("select.doctv_installments").css("border","1px solid #ccc");
      // validation for installments
      var installmentsCount = jQuery(this).find("select.doctv_installments  :selected").length;
      if(installmentsCount == 0){
        jQuery(this).find("select.doctv_installments").css("border-color","red");
        flag1++;
         //return false;
      }
      // validation for from and to amount
      if((doctv_from == "" || isNaN(doctv_from)) && (doctv_to == "" || isNaN(doctv_to))){
        // all empty and string
        jQuery(this).find(".doctv_from").css("border","1px solid red");
        jQuery(this).find(".doctv_to").css("border","1px solid red");
        flag1++;
         //return false;
        
        
      }else if(doctv_from != "" || isNaN(doctv_from)){
        if( doctv_to == "" || isNaN(doctv_to)){
          // check from less than 1000 and to is empty
          if(doctv_from < 1000){
            jQuery(this).find(".doctv_to").css("border","1px solid red");
            flag1++;
             //return false;
          }
        }
        if(doctv_from == "" || isNaN(doctv_from)){
            // when from empty
            jQuery(this).find(".doctv_from").css("border"," 1px solid red");
            flag1++;
            //return false;
        } 
        
      }

      //  validation that there are no overlaps with the periods
      if (!fromToArr.hasOwnProperty(doctv_currency)) {
        fromToArr[doctv_currency] = {};  
      }
      var countObj = Object.keys(fromToArr[doctv_currency]).length;
      fromToArr[doctv_currency][countObj] = {};
      fromToArr[doctv_currency][countObj]["from"] = doctv_from;
      fromToArr[doctv_currency][countObj]["to"] = doctv_to;
      fromToArr[doctv_currency][countObj]["currency"] = doctv_currency;
      if(flag1 == 0 && Object.keys(fromToArr[doctv_currency]).length > 1){
        for(var j=0; j<Object.keys(fromToArr[doctv_currency]).length-1; j++){
           if(((doctv_from >= fromToArr[doctv_currency][j]["from"] && doctv_from <= fromToArr[doctv_currency][j]["to"]) || (doctv_to >= fromToArr[doctv_currency][j]["from"] && doctv_to <= fromToArr[doctv_currency][j]["to"])) && doctv_currency == fromToArr[doctv_currency][j]["currency"]){
            console.log("forrrr");
            jQuery(this).find(".doctv_from").css("border","1px solid red");
            jQuery(this).find(".doctv_to").css("border","1px solid red");
            flag1++;
            overlaps++;
          }
          // check if there is gap between previous to and next from
          if(((fromToArr[doctv_currency][j]["to"]+1) != fromToArr[doctv_currency][j+1]["from"]) && doctv_currency == fromToArr[doctv_currency][j]["currency"]){
            jQuery(this).find(".doctv_from").css("border","1px solid red");
            jQuery(this).find(".doctv_to").css("border","1px solid red");
            flag1++;
            hasGap++;  
          } 
        }
      }

      i++;

      // check if from is bigger than to
      if(doctv_from > doctv_to){
        jQuery(this).find(".doctv_from").css("border","1px solid red");
        jQuery(this).find(".doctv_to").css("border","1px solid red");  
        fromBigger++;
      }

      });//console.log(fromToArr);return;
    }

    // 
    if(jQuery("select#payment_pis_cc_first_payment").val() == "percentage"){
      var percentageOfOrder = jQuery("#payment_pis_cc_percentage_of_order").val();
      if(percentageOfOrder > 50 ){
        percentageFlag++; 
        flag1++; 
      }
      
    }
    if(flag1 == 0){
      
      createJsonOfDependingOnCartTotal();
      createJsonOfSiteLanguage();
      //eval(configForm.submit());
    }else{
      var error;
      if(fromBigger){
        //alert("From amount should be lesser than To.");
        error = "From amount should be lesser than To.";
      }
      else if(overlaps){
        error = "From and To amount should not Overlap as per Currency";
      }
      else if(percentageFlag){
        jQuery("#payment_pis_cc_percentage_of_order").css("border","1px solid red");
        error = "Please enter Percentage of order % <= 50";
      }else if(hasGap){
        error = "There should not be Gap between To and From amounts as per Currency.";
      }else{
        error = "Please fill the required fields in Splitit section (Depending on cart total)";  
      }
      reject("Splitit Embedded Payment Error:"+error);
       //return false;
    }

     resolve('Hello World!');
 });
}
// all logic for Splitit payment form Setting for depending on cart total
function logicForPaymentFormSetting(){
  return new Promise(function (resolve, reject) {


    var percentageFlag = 0;
    var overlaps = 0;
    var fromBigger = 0;
    var hasGap = 0;
    flag2 = 0;
    // validation for depanding on cart
    // $(this).unbind('click');
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    //alert('Please fill the required fields in Splitit section "Depending on cart total"');
    

    jQuery("#payment_pis_paymentform_percentage_of_order").css("border","1px solid #ccc");
    if(jQuery('#payment_pis_paymentform_select_installment_setup').val() == 'depending_on_cart_total'){
      var fromToArr = {};
      var i=0;
      jQuery("#tier_price_container_payment_form tr").each(function(){
      
      
      var doctv_from = parseFloat(jQuery(this).find(".doctv_from").val());
      var doctv_to = parseFloat(jQuery(this).find(".doctv_to").val());
      var doctv_currency = jQuery(this).find(".doctv_currency").val();

      jQuery(this).find(".doctv_from").css("border","1px solid #ccc");
      jQuery(this).find(".doctv_to").css("border","1px solid #ccc");
      jQuery(this).find("select.doctv_installments").css("border","1px solid #ccc");
      // validation for installments
      var installmentsCount = jQuery(this).find("select.doctv_installments  :selected").length;
      if(installmentsCount == 0){
        jQuery(this).find("select.doctv_installments").css("border-color","red");
        flag2++;
         //return false;
      }
      // validation for from and to amount
      if((doctv_from == "" || isNaN(doctv_from)) && (doctv_to == "" || isNaN(doctv_to))){
        // all empty and string
        jQuery(this).find(".doctv_from").css("border","1px solid red");
        jQuery(this).find(".doctv_to").css("border","1px solid red");
        flag2++;
         //return false;
        
        
      }else if(doctv_from != "" || isNaN(doctv_from)){
        if( doctv_to == "" || isNaN(doctv_to)){
          // check from less than 1000 and to is empty
          if(doctv_from < 1000){
            jQuery(this).find(".doctv_to").css("border","1px solid red");
            flag2++;
             //return false;
          }
        }
        if(doctv_from == "" || isNaN(doctv_from)){
            // when from empty
            jQuery(this).find(".doctv_from").css("border"," 1px solid red");
            flag2++;
            //return false;
        } 
        
      }

      //  validation that there are no overlaps with the periods
      if (!fromToArr.hasOwnProperty(doctv_currency)) {
        fromToArr[doctv_currency] = {};  
      }
      var countObj = Object.keys(fromToArr[doctv_currency]).length;
      fromToArr[doctv_currency][countObj] = {};
      fromToArr[doctv_currency][countObj]["from"] = doctv_from;
      fromToArr[doctv_currency][countObj]["to"] = doctv_to;
      fromToArr[doctv_currency][countObj]["currency"] = doctv_currency;
      if(flag2 == 0 && Object.keys(fromToArr[doctv_currency]).length > 1){
        for(var j=0; j<Object.keys(fromToArr[doctv_currency]).length-1; j++){
           if(((doctv_from >= fromToArr[doctv_currency][j]["from"] && doctv_from <= fromToArr[doctv_currency][j]["to"]) || (doctv_to >= fromToArr[doctv_currency][j]["from"] && doctv_to <= fromToArr[doctv_currency][j]["to"])) && doctv_currency == fromToArr[doctv_currency][j]["currency"]){
            console.log("forrrr");
            jQuery(this).find(".doctv_from").css("border","1px solid red");
            jQuery(this).find(".doctv_to").css("border","1px solid red");
            flag2++;
            overlaps++;
          }
          // check if there is gap between previous to and next from
          if(((fromToArr[doctv_currency][j]["to"]+1) != fromToArr[doctv_currency][j+1]["from"]) && doctv_currency == fromToArr[doctv_currency][j]["currency"]){
            jQuery(this).find(".doctv_from").css("border","1px solid red");
            jQuery(this).find(".doctv_to").css("border","1px solid red");
            flag2++;
            hasGap++;  
          } 
        }
      }

      i++;

      // check if from is bigger than to
      if(doctv_from > doctv_to){
        jQuery(this).find(".doctv_from").css("border","1px solid red");
        jQuery(this).find(".doctv_to").css("border","1px solid red");  
        fromBigger++;
      }

      });//console.log(fromToArr);return;
    }

    // 
    if(jQuery("select#payment_pis_paymentform_first_payment").val() == "percentage"){
      var percentageOfOrder = jQuery("#payment_pis_paymentform_percentage_of_order").val();
      if(percentageOfOrder > 50 ){
        percentageFlag++; 
        flag2++; 
      }
      
    }
    if(flag2 == 0){
      
      createJsonOfDependingOnCartTotalForPaymentForm();
      createJsonOfSiteLanguageForPaymentForm();
      //eval(configForm.submit());
    }else{
      var error;
      if(fromBigger){
        //alert("From amount should be lesser than To.");
        error = "From amount should be lesser than To.";
      }
      else if(overlaps){
        error = "From and To amount should not Overlap as per Currency";
      }
      else if(percentageFlag){
        jQuery("#payment_pis_paymentform_percentage_of_order").css("border","1px solid red");
        error = "Please enter Percentage of order % <= 50";
      }else if(hasGap){
        error = "There should not be Gap between To and From amounts as per Currency.";
      }else{
        error = "Please fill the required fields in Splitit section (Depending on cart total)";  
      }
      reject("Splitit Payment Form Error : "+error);
       //return false;
    }

     resolve('Hello World!');
 });
}  

function addRow(){

    var count = jQuery("table.splitit").find("tbody").find("tr").length;
count = "";
    var appendRow = '<tr>'
         +'<td>'
          +'From<br><input type="text" class="doctv_from" name="doctv_from" /><br>To<br><input type="text" class="doctv_to" name="doctv_to" />'
         +'</td>'
         +'<td>'
          +'<select id="doctv_installments" name="doctv_installments" class=" select multiselect doctv_installments" size="10" multiple="multiple">'
            +'<option value="1">1 Installment</option>'
            +'<option value="2">2 Installments</option>'
            +'<option value="3">3 Installments</option>'
            +'<option value="4">4 Installments</option>'
            +'<option value="5">5 Installments</option>'
            +'<option value="6">6 Installments</option>'
            +'<option value="7">7 Installments</option>'
            +'<option value="8">8 Installments</option>'
            +'<option value="9">9 Installments</option>'
            +'<option value="10">10 Installments</option>'
            +'<option value="11">11 Installments</option>'
            +'<option value="12">12 Installments</option>'
            +'</select>'
         +'</td>'
         +'<td>'
          +'<select id="" class="doctv_currency" name="doctv_currency" class=" select">'
            +currenyOptions+
           +'</select>'
           /*+currenyOptions*/
         +'</td>'
         +'<td>'
          +'<button title="Delete Tier" type="button" class="scalable delete icon-btn delete-product-option" id="" onclick="deleteRow(this);"><span><span><span>Delete</span></span></span></button>'
         +'</td>'
      +'</tr>';
    jQuery("table.splitit tbody").append(appendRow);
    

}

function addRowPaymentForm(){

    var count = jQuery("table.splitit_payment_form").find("tbody").find("tr").length;
count = "";
    var appendRow = '<tr>'
         +'<td>'
          +'From<br><input type="text" class="doctv_from" name="doctv_from" /><br>To<br><input type="text" class="doctv_to" name="doctv_to" />'
         +'</td>'
         +'<td>'
          +'<select id="doctv_installments_pf" name="doctv_installments" class=" select multiselect doctv_installments" size="10" multiple="multiple">'
            +'<option value="1">1 Installment</option>'
            +'<option value="2">2 Installments</option>'
            +'<option value="3">3 Installments</option>'
            +'<option value="4">4 Installments</option>'
            +'<option value="5">5 Installments</option>'
            +'<option value="6">6 Installments</option>'
            +'<option value="7">7 Installments</option>'
            +'<option value="8">8 Installments</option>'
            +'<option value="9">9 Installments</option>'
            +'<option value="10">10 Installments</option>'
            +'<option value="11">11 Installments</option>'
            +'<option value="12">12 Installments</option>'
            +'</select>'
         +'</td>'
         +'<td>'
          +'<select class="doctv_currency" name="doctv_currency" class=" select">'
            +currenyOptions+
           +'</select>'
           /*+currenyOptions*/
         +'</td>'
         +'<td>'
          +'<button title="Delete Tier" type="button" class="scalable delete icon-btn delete-product-option" id="" onclick="deleteRow(this);"><span><span><span>Delete</span></span></span></button>'
         +'</td>'
      +'</tr>';
    jQuery("table.splitit_payment_form tbody").append(appendRow);
    

}
function deleteRow(curObj){
    var count = jQuery(curObj).closest("tbody").find("tr").length;
    if(count > 1){
        jQuery(curObj).closest("tr").remove();    
    }
    
} 
function createJsonOfDependingOnCartTotal(){
     var i = 0;
     var object = {};

     jQuery("table.splitit tbody").find('tr').each(function() {
        var $this = jQuery(this);
        var installments = [];
        object[i] = {};
        object[i]["doctv"] = {};
        object[i]["doctv"]["from"] = $this.find("td:first-child").find("input.doctv_from").val();
        object[i]["doctv"]["to"] = $this.find("td:first-child").find("input.doctv_to").val(); 
        $this.find("td:nth-child(2)").find(".doctv_installments :selected").each(function(i, selected){ 
           installments.push(jQuery(selected).val());
        });
        object[i]["doctv"]["installments"] = installments.toString();
        object[i]["doctv"]["currency"] = $this.find("td:nth-child(3)").find(".doctv_currency").val();
       
        i++;      
    });
    object = JSON.stringify(object);
    console.log(object);
    jQuery("#payment_pis_cc_depanding_on_cart_total_values").val(object);

}

function createJsonOfDependingOnCartTotalForPaymentForm(){
     var i = 0;
     var object = {};

     jQuery("table.splitit_payment_form tbody").find('tr').each(function() {
        var $this = jQuery(this);
        var installments = [];
        object[i] = {};
        object[i]["doctv"] = {};
        object[i]["doctv"]["from"] = $this.find("td:first-child").find("input.doctv_from").val();
        object[i]["doctv"]["to"] = $this.find("td:first-child").find("input.doctv_to").val(); 
        $this.find("td:nth-child(2)").find(".doctv_installments :selected").each(function(i, selected){ 
           installments.push(jQuery(selected).val());
        });
        object[i]["doctv"]["installments"] = installments.toString();
        object[i]["doctv"]["currency"] = $this.find("td:nth-child(3)").find(".doctv_currency").val();
       
        i++;      
    });
    object = JSON.stringify(object);
    console.log(object);
    jQuery("#payment_pis_paymentform_depanding_on_cart_total_values").val(object);

}

// all the logic to store and process with Translation
jQuery(document).ready(function(){
  // show selected language data for embedded
  jQuery("#payment_pis_cc_select_language").on("change", function(){
    var selectedLanguage = jQuery(this).val();
    jQuery("#languages_table_"+selectedLanguage).show().siblings().hide();
  });

  // check if edited the Translation column for embedded
  var inputOldVal = "";
  var inputNewVal = "";
  jQuery("input[id^='translation_'").on("click, focus", function(){
    inputOldVal = jQuery(this).val();
  });
  jQuery("input[id^='translation_'").on("keyup", function(){
    jQuery(this).siblings("input").val('1');
  });
  jQuery("input[id^='translation_']").on("blur",function(){
    inputNewVal = jQuery(this).val();
    if(inputNewVal != inputOldVal){
      jQuery(this).siblings("input").val('1');
    }else{
      jQuery(this).siblings("input").val('0');
    }
  });

  // show selected language data for payment form
  jQuery("#payment_pis_paymentform_select_language").on("change", function(){
    var selectedLanguage = jQuery(this).val();
    jQuery("#payment_form_languages_table_"+selectedLanguage).show().siblings().hide();
  });

  // check if edited the Translation column for payment form
  var inputOldVal = "";
  var inputNewVal = "";
  jQuery("input[id^='pf_translation_'").on("click, focus", function(){
    inputOldVal = jQuery(this).val();
  });
  jQuery("input[id^='pf_translation_'").on("keyup", function(){
    jQuery(this).siblings("input").val('1');
  });
  jQuery("input[id^='pf_translation_']").on("blur",function(){
    inputNewVal = jQuery(this).val();
    if(inputNewVal != inputOldVal){
      jQuery(this).siblings("input").val('1');
    }else{
      jQuery(this).siblings("input").val('0');
    }
  });
  

});

function createJsonOfSiteLanguage(){
  var siteLanguageArr = [];
  jQuery("#payment_pis_cc_select_language > option").each(function() {
      siteLanguageArr.push(this.value);
  });
  
  var finalObject = {};
  var i = 0;
  var j = 0;
  for(i=0; i < siteLanguageArr.length; i++ ){
    finalObject[siteLanguageArr[i]] = {};
    j = 0;
    jQuery("table#languages_table_"+siteLanguageArr[i]+" > tbody > tr").each(function(){
      var keyData = jQuery(this).find("td:eq(0) input[type='text']").val();
      var engData = jQuery(this).find("td:eq(1) input[type='text']").val();
      var translatedData = jQuery(this).find("td:eq(2) input[type='text']").val();
      var edited = jQuery(this).find("td:eq(2) input[type='hidden']").val();

      finalObject[siteLanguageArr[i]][keyData] = {};
      finalObject[siteLanguageArr[i]][keyData]["keyData"] = keyData;
      finalObject[siteLanguageArr[i]][keyData]["engData"] = engData;
      finalObject[siteLanguageArr[i]][keyData]["translatedData"] = translatedData;
      finalObject[siteLanguageArr[i]][keyData]["edited"] = edited;

      j++;
    });
  }

  jQuery("#payment_pis_cc_translate_languages").val(JSON.stringify(finalObject));
  

}  

function createJsonOfSiteLanguageForPaymentForm(){
  var siteLanguageArr = [];
  jQuery("#payment_pis_paymentform_select_language > option").each(function() {
      siteLanguageArr.push(this.value);
  });
  
  var finalObject = {};
  var i = 0;
  var j = 0;
  for(i=0; i < siteLanguageArr.length; i++ ){
    finalObject[siteLanguageArr[i]] = {};
    j = 0;
    jQuery("table#payment_form_languages_table_"+siteLanguageArr[i]+" > tbody > tr").each(function(){
      var keyData = jQuery(this).find("td:eq(0) input[type='text']").val();
      var engData = jQuery(this).find("td:eq(1) input[type='text']").val();
      var translatedData = jQuery(this).find("td:eq(2) input[type='text']").val();
      var edited = jQuery(this).find("td:eq(2) input[type='hidden']").val();

      finalObject[siteLanguageArr[i]][keyData] = {};
      finalObject[siteLanguageArr[i]][keyData]["keyData"] = keyData;
      finalObject[siteLanguageArr[i]][keyData]["engData"] = engData;
      finalObject[siteLanguageArr[i]][keyData]["translatedData"] = translatedData;
      finalObject[siteLanguageArr[i]][keyData]["edited"] = edited;

      j++;
    });
  }

  jQuery("#payment_pis_paymentform_translate_languages").val(JSON.stringify(finalObject));
  

} 


</script>